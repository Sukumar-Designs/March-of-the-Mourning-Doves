[gd_scene load_steps=19 format=3 uid="uid://dnepl2iikj3k5"]

[ext_resource type="Script" path="res://Scripts/UI_movement.gd" id="1_2ihiu"]
[ext_resource type="Texture2D" uid="uid://bvassvlxwh2l6" path="res://Assets/Background_map.jpg" id="4_ykqu8"]
[ext_resource type="Texture2D" uid="uid://dbmecrs5n8485" path="res://Assets/squirrel soldier grey.png" id="6_bsm2v"]
[ext_resource type="Texture2D" uid="uid://blndtblnvtfev" path="res://Assets/squirrel soldier highlight.png" id="7_grxjc"]
[ext_resource type="Script" path="res://Scripts/mini_map.gd" id="10_8xf17"]
[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain.gd" id="11_i0r1d"]
[ext_resource type="Resource" path="res://Terrain/data.hterrain" id="12_88ni1"]
[ext_resource type="Script" path="res://Scripts/HealthBar.gd" id="12_l3ivy"]
[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain_texture_set.gd" id="13_3wvgy"]
[ext_resource type="PackedScene" uid="uid://c5snj02lfcnc4" path="res://Full_Assets/sidebar.tscn" id="13_53qpc"]
[ext_resource type="PackedScene" uid="uid://c20qaxx3gpxc" path="res://Full_Assets/bird_base_full.tscn" id="13_rmbku"]
[ext_resource type="Texture2D" uid="uid://bjy4jdblb2l2m" path="res://Scenes/game_slot0_albedo_bump.png" id="14_hpfbq"]
[ext_resource type="PackedScene" uid="uid://c720yiw6pru12" path="res://Full_Assets/tree_full.tscn" id="14_kow6g"]
[ext_resource type="PackedScene" uid="uid://lqpe03putqqm" path="res://Full_Assets/Twig_Full.tscn" id="15_4qpbd"]

[sub_resource type="NavigationMesh" id="NavigationMesh_bx183"]
vertices = PackedVector3Array(37.6705, 0.481945, -11.9384, 37.6705, 0.481945, -11.4384, 50.6705, 0.481945, -11.4384, 36.1705, 0.481945, -13.1884, 37.6705, 0.481945, -11.9384, 50.6705, 0.481945, -11.4384, 16.6705, 0.481945, -27.1884, 36.1705, 0.481945, -13.1884, 50.6705, 0.481945, -11.4384, 50.6705, 0.481945, -55.1884, -38.0795, 0.481945, -55.1884, 16.6705, 0.481945, -27.1884, 50.6705, 0.481945, -11.4384, -38.3295, 0.481945, -42.6884, -50.5795, 0.481945, -51.4384, -50.5795, 0.481945, -0.4384, 33.6705, 0.481945, -0.4384, 33.6705, 0.481945, -6.6884, -38.3295, 0.481945, -42.6884, -50.5795, 0.481945, -0.4384, 37.6705, 0.481945, -10.6884, 36.4205, 0.481945, -9.6884, 35.4205, 0.481945, -7.9384, 33.6705, 0.481945, -0.4384, 50.6705, 0.481945, -0.4384, 50.6705, 0.481945, -11.4384, 35.4205, 0.481945, -7.9384, 33.6705, 0.481945, -6.6884, 33.6705, 0.481945, -0.4384, 50.6705, 0.481945, -11.4384, 37.6705, 0.481945, -11.4384, 37.6705, 0.481945, -10.6884)
polygons = [PackedInt32Array(2, 1, 0), PackedInt32Array(5, 4, 3), PackedInt32Array(8, 7, 6), PackedInt32Array(12, 11, 9), PackedInt32Array(9, 11, 10), PackedInt32Array(15, 14, 13), PackedInt32Array(17, 16, 18), PackedInt32Array(18, 16, 19), PackedInt32Array(21, 20, 22), PackedInt32Array(22, 20, 23), PackedInt32Array(23, 20, 25), PackedInt32Array(23, 25, 24), PackedInt32Array(28, 27, 26), PackedInt32Array(31, 30, 29)]

[sub_resource type="BoxShape3D" id="BoxShape3D_jfr3u"]
size = Vector3(1.8974, 1, 0.748688)

[sub_resource type="Shader" id="Shader_jxpny"]
code = "shader_type spatial;

// This is a shader with less textures, in case the main one doesn't run on your GPU.
// It's mostly a big copy/paste, because Godot doesn't support #include or #ifdef...

#include \"include/heightmap.gdshaderinc\"

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_normalmap;
// I had to remove `hint_albedo` from colormap in Godot 3 because it makes sRGB conversion kick in,
// which snowballs to black when doing GPU painting on that texture...
uniform sampler2D u_terrain_colormap;// : hint_albedo;
uniform sampler2D u_terrain_splatmap;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

uniform sampler2D u_ground_albedo_bump_0 : source_color;
uniform sampler2D u_ground_albedo_bump_1 : source_color;
uniform sampler2D u_ground_albedo_bump_2 : source_color;
uniform sampler2D u_ground_albedo_bump_3 : source_color;

uniform float u_ground_uv_scale = 20.0;
uniform bool u_depth_blending = true;
uniform bool u_triplanar = false;
// Each component corresponds to a ground texture. Set greater than zero to enable.
uniform vec4 u_tile_reduction = vec4(0.0, 0.0, 0.0, 0.0);

varying vec4 v_tint;
varying vec4 v_splat;
varying vec3 v_ground_uv;


vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	// Had to negate Z because it comes from Y in the normal map,
	// and OpenGL-style normal maps are Y-up.
	n.z *= -1.0;
	return n;
}

// Blends weights according to the bump of detail textures,
// so for example it allows to have sand fill the gaps between pebbles
vec4 get_depth_blended_weights(vec4 splat, vec4 bumps) {
	float dh = 0.2;

	vec4 h = bumps + splat;
	
	// TODO Keep improving multilayer blending, there are still some edge cases...
	// Mitigation: nullify layers with near-zero splat
	h *= smoothstep(0, 0.05, splat);
	
	vec4 d = h + dh;
	d.r -= max(h.g, max(h.b, h.a));
	d.g -= max(h.r, max(h.b, h.a));
	d.b -= max(h.g, max(h.r, h.a));
	d.a -= max(h.g, max(h.b, h.r));
	
	return clamp(d, 0, 1);
}

vec3 get_triplanar_blend(vec3 world_normal) {
	vec3 blending = abs(world_normal);
	blending = normalize(max(blending, vec3(0.00001))); // Force weights to sum to 1.0
	float b = blending.x + blending.y + blending.z;
	return blending / vec3(b, b, b);
}

vec4 texture_triplanar(sampler2D tex, vec3 world_pos, vec3 blend) {
	vec4 xaxis = texture(tex, world_pos.yz);
	vec4 yaxis = texture(tex, world_pos.xz);
	vec4 zaxis = texture(tex, world_pos.xy);
	// blend the results of the 3 planar projections.
	return xaxis * blend.x + yaxis * blend.y + zaxis * blend.z;
}

vec4 depth_blend2(vec4 a, vec4 b, float t) {
	// https://www.gamasutra.com
	// /blogs/AndreyMishkinis/20130716/196339/Advanced_Terrain_Texture_Splatting.php
	float d = 0.1;
	float ma = max(a.a + (1.0 - t), b.a + t) - d;
	float ba = max(a.a + (1.0 - t) - ma, 0.0);
	float bb = max(b.a + t - ma, 0.0);
	return (a * ba + b * bb) / (ba + bb);
}

vec4 texture_antitile(sampler2D tex, vec2 uv) {
	float frequency = 2.0;
	float scale = 1.3;
	float sharpness = 0.7;
	
	// Rotate and scale UV
	float rot = 3.14 * 0.6;
	float cosa = cos(rot);
	float sina = sin(rot);
	vec2 uv2 = vec2(cosa * uv.x - sina * uv.y, sina * uv.x + cosa * uv.y) * scale;
	
	vec4 col0 = texture(tex, uv);
	vec4 col1 = texture(tex, uv2);
	//col0 = vec4(0.0, 0.0, 1.0, 1.0);
	// Periodically alternate between the two versions using a warped checker pattern
	float t = 0.5 + 0.5 
		* sin(uv2.x * frequency + sin(uv.x) * 2.0) 
		* cos(uv2.y * frequency + sin(uv.y) * 2.0);
	// Using depth blend because classic alpha blending smoothes out details
	return depth_blend2(col0, col1, smoothstep(0.5 * sharpness, 1.0 - 0.5 * sharpness, t));
}

void vertex() {
	vec2 cell_coords = (u_terrain_inverse_transform * MODEL_MATRIX * vec4(VERTEX, 1)).xz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results.
	cell_coords += vec2(0.5);

	// Normalized UV
	UV = cell_coords / vec2(textureSize(u_terrain_heightmap, 0));
	
	// Height displacement
	float h = sample_heightmap(u_terrain_heightmap, UV);
	VERTEX.y = h;

	v_ground_uv = vec3(cell_coords.x, h * MODEL_MATRIX[1][1], cell_coords.y) / u_ground_uv_scale;
	
	// Putting this in vertex saves 2 fetches from the fragment shader,
	// which is good for performance at a negligible quality cost,
	// provided that geometry is a regular grid that decimates with LOD.
	// (downside is LOD will also decimate tint and splat, but it's not bad overall)
	v_tint = texture(u_terrain_colormap, UV);
	v_splat = texture(u_terrain_splatmap, UV);
	
	// Need to use u_terrain_normal_basis to handle scaling.
	NORMAL = u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
}

void fragment() {
	if (v_tint.a < 0.5) {
		// TODO Add option to use vertex discarding instead, using NaNs
		discard;
	}
	
	vec3 terrain_normal_world = 
		u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
	terrain_normal_world = normalize(terrain_normal_world);

	// TODO Detail should only be rasterized on nearby chunks (needs proximity management to switch shaders)
	
	vec2 ground_uv = v_ground_uv.xz;
	
	vec4 ab0, ab1, ab2, ab3;
	if (u_triplanar) {
		// Only do triplanar on one texture slot,
		// because otherwise it would be very expensive and cost many more ifs.
		// I chose the last slot because first slot is the default on new splatmaps,
		// and that's a feature used for cliffs, which are usually designed later.

		vec3 blending = get_triplanar_blend(terrain_normal_world);

		ab3 = texture_triplanar(u_ground_albedo_bump_3, v_ground_uv, blending);

	} else {
		if (u_tile_reduction[3] > 0.0) {
			ab3 = texture(u_ground_albedo_bump_3, ground_uv);
		} else {
			ab3 = texture_antitile(u_ground_albedo_bump_3, ground_uv);
		}
	}
	
	if (u_tile_reduction[0] > 0.0) {
		ab0 = texture_antitile(u_ground_albedo_bump_0, ground_uv);
	} else {
		ab0 = texture(u_ground_albedo_bump_0, ground_uv);
	}
	if (u_tile_reduction[1] > 0.0) {
		ab1 = texture_antitile(u_ground_albedo_bump_1, ground_uv);
	} else {
		ab1 = texture(u_ground_albedo_bump_1, ground_uv);
	}
	if (u_tile_reduction[2] > 0.0) {
		ab2 = texture_antitile(u_ground_albedo_bump_2, ground_uv);
	} else {
		ab2 = texture(u_ground_albedo_bump_2, ground_uv);
	}
	
	vec3 col0 = ab0.rgb;
	vec3 col1 = ab1.rgb;
	vec3 col2 = ab2.rgb;
	vec3 col3 = ab3.rgb;
	
	vec4 w;
	// TODO An #ifdef macro would be nice! Or copy/paste everything in a different shader...
	if (u_depth_blending) {
		w = get_depth_blended_weights(v_splat, vec4(ab0.a, ab1.a, ab2.a, ab3.a));
	} else {
		w = v_splat.rgba;
	}
	
	float w_sum = (w.r + w.g + w.b + w.a);
	
	ALBEDO = v_tint.rgb * (
		w.r * col0.rgb + 
		w.g * col1.rgb + 
		w.b * col2.rgb + 
		w.a * col3.rgb) / w_sum;
	
	ROUGHNESS = 1.0;
	
	NORMAL = (VIEW_MATRIX * (vec4(terrain_normal_world, 0.0))).xyz;

	//ALBEDO = w.rgb;
	//ALBEDO = v_ground_uv.xyz;
}

"

[sub_resource type="Resource" id="Resource_blclb"]
script = ExtResource("13_3wvgy")
mode = 0
textures = [[ExtResource("14_hpfbq")], [null]]

[node name="Node3D" type="Node3D"]

[node name="UI_Controller" type="CharacterBody3D" parent="." groups=["minimap_objects", "player"]]
transform = Transform3D(1, 0, 0, 0, 0.388706, 0.921362, 0, -0.921362, 0.388706, -6.56252, 87.8457, 127.783)
script = ExtResource("1_2ihiu")

[node name="Camera3D" type="Camera3D" parent="UI_Controller"]
transform = Transform3D(1, 0, 0, 0, 0.895004, -0.446057, 0, 0.446057, 0.895004, 0.178162, -94.7887, 40.6169)
current = true

[node name="MiniMap" type="MarginContainer" parent="."]
offset_left = 8.0
offset_top = 16.0
offset_right = 146.0
offset_bottom = 154.0
scale = Vector2(0.0308367, 0.0574178)
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 5
theme_override_constants/margin_right = 5
theme_override_constants/margin_bottom = 5
script = ExtResource("10_8xf17")

[node name="NinePatchRect" type="NinePatchRect" parent="MiniMap"]
layout_mode = 2
patch_margin_left = 64
patch_margin_top = 64
patch_margin_right = 64
patch_margin_bottom = 64

[node name="MarginContainer" type="MarginContainer" parent="MiniMap"]
layout_mode = 2

[node name="BackgroundMap" type="TextureRect" parent="MiniMap/MarginContainer"]
modulate = Color(1, 1, 1, 0.419608)
self_modulate = Color(1, 1, 1, 0.466667)
layout_mode = 2
texture = ExtResource("4_ykqu8")

[node name="Squirrel" type="Sprite2D" parent="MiniMap/MarginContainer/BackgroundMap"]
visible = false
position = Vector2(4632.33, 1353.46)
scale = Vector2(1.31547, 0.489002)
texture = ExtResource("6_bsm2v")

[node name="SquirrelSoldierHighlight" type="Sprite2D" parent="MiniMap/MarginContainer/BackgroundMap"]
visible = false
position = Vector2(4989.05, 1492.79)
scale = Vector2(0.638606, 0.272853)
texture = ExtResource("7_grxjc")

[node name="HealthBars" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = 384.0
offset_top = 1.0
offset_right = 424.0
offset_bottom = 41.0

[node name="SquirrelHealth" type="ProgressBar" parent="HealthBars"]
modulate = Color(0.686275, 0, 0.109804, 1)
self_modulate = Color(0.941176, 0.196078, 0.431373, 1)
layout_mode = 0
offset_left = 355.0
offset_top = 17.0
offset_right = 507.0
offset_bottom = 44.0
max_value = 1.0
show_percentage = false
script = ExtResource("12_l3ivy")

[node name="BirdHealth" type="ProgressBar" parent="HealthBars"]
modulate = Color(0.290196, 0.152941, 0.917647, 1)
self_modulate = Color(0.4, 0.486275, 0.964706, 1)
layout_mode = 0
offset_left = 21.0
offset_top = 18.0
offset_right = 173.0
offset_bottom = 45.0
max_value = 1.0
show_percentage = false
script = ExtResource("12_l3ivy")

[node name="bird_base" parent="." instance=ExtResource("13_rmbku")]
transform = Transform3D(0.626779, 0, 0, 0, 0.626779, 0, 0, 0, 0.626779, -90.017, 10.1872, 59.9615)
side = "side_bird"
enemy = "enemy_squirrel"

[node name="NavigationRegion3D" type="NavigationRegion3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -326.133, 0, 0)
navigation_mesh = SubResource("NavigationMesh_bx183")

[node name="Terrain" type="CSGBox3D" parent="NavigationRegion3D"]
transform = Transform3D(102.159, 0, 0, 0, 1.01329, 0, 0, 0, 55.6988, -133.307, 12.259, -27.839)
operation = 2

[node name="CSGPolygon3D" type="CSGPolygon3D" parent="NavigationRegion3D/Terrain"]
transform = Transform3D(-0.955188, 0.235844, -7.09595e-10, 2.64869e-13, -1.78575e-06, -2.81201, -1.25394, -0.604359, 1.81837e-09, 0.00231469, -1.41649, 1.17586)
operation = 2
polygon = PackedVector2Array(0.7979, 1.19593, 0.202487, 1.45422, -0.0150268, 1.45344, -0.0120477, 1.31184, 0.651099, 1.01038, 0.982903, 1.0064)

[node name="Terrian_Area3D" type="Area3D" parent="NavigationRegion3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.30489, 12.603, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="NavigationRegion3D/Terrian_Area3D"]
transform = Transform3D(53.0225, 0, 0, 0, 4.02445, 0, 0, 0, 77.4681, -112.704, -1.89349, -27.3287)
shape = SubResource("BoxShape3D_jfr3u")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="NavigationRegion3D"]
transform = Transform3D(-0.154297, -0.13163, -0.979217, 0.988025, -0.0205563, -0.152921, -6.38445e-09, -0.991086, 0.133225, 71.2342, 56.2216, -28.1464)
light_energy = 1.914
light_volumetric_fog_energy = 0.0
light_angular_distance = 48.12
shadow_bias = 0.0
shadow_normal_bias = 4.952
shadow_reverse_cull_face = true

[node name="DirectionalLight3D2" type="DirectionalLight3D" parent="NavigationRegion3D"]
transform = Transform3D(0.780856, -5.3524e-07, 0.624711, -0.327238, -0.851828, 0.409029, 0.532146, -0.523822, -0.665155, 212.217, 19.6152, -858.337)

[node name="squirrel_base" parent="." instance=ExtResource("13_rmbku")]
transform = Transform3D(-0.0788651, -0.00420492, -0.66124, -0.0354561, 0.664995, 0, 0.660302, 0.0352059, -0.0789771, 90.4606, 10.9825, -59.8921)
side = "side_squirrel"

[node name="Pine_Tree_Full" parent="." instance=ExtResource("14_kow6g")]
transform = Transform3D(0.0182745, 0, 0, 0, 0.0182745, 0, 0, 0, 0.0182745, 0, 0, -43.0822)

[node name="PinesFull" parent="." instance=ExtResource("15_4qpbd")]
transform = Transform3D(0.232273, 0.154101, 0.0497696, -0.150185, 0.172441, 0.166984, 0.0605687, -0.163377, 0.223192, 1.1102, 9.53674e-07, -12.0882)

[node name="Sidebar" parent="." instance=ExtResource("13_53qpc")]

[node name="HTerrain" type="Node3D" parent="."]
script = ExtResource("11_i0r1d")
map_scale = Vector3(0.4, 0.5, 0.301)
centered = true
_terrain_data = ExtResource("12_88ni1")
chunk_size = 16
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = SubResource("Shader_jxpny")
custom_globalmap_shader = null
texture_set = SubResource("Resource_blclb")
render_layers = 1
cast_shadow = 1
shader_params/u_ground_uv_scale = 512.305
shader_params/u_depth_blending = true
shader_params/u_triplanar = true
shader_params/u_tile_reduction = null

[node name="Terrian_Area3D" type="Area3D" parent="NavigationRegion3D2"]
transform = Transform3D(2.01398, 0, 0, 0, 1, 0, 0, 0, 2.21068, 274.825, -5.71167, -3.64553)

[node name="CollisionShape3D" type="CollisionShape3D" parent="NavigationRegion3D2/Terrian_Area3D"]
transform = Transform3D(53.0225, 0, 0, 0, 4.02445, 0, 0, 0, 77.4681, -112.704, -1.89349, -27.3287)
shape = SubResource("BoxShape3D_jfr3u")

[connection signal="child_entered_tree" from="." to="MiniMap" method="_on_node_3d_child_entered_tree"]
[connection signal="healthChanged" from="bird_base" to="HealthBars/BirdHealth" method="_on_bird_base_health_changed"]
[connection signal="healthChanged" from="squirrel_base" to="HealthBars/SquirrelHealth" method="_on_squirrel_base_health_changed"]
