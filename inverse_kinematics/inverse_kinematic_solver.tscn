[gd_scene load_steps=2 format=3 uid="uid://oqt1hxakg6ds"]

[sub_resource type="GDScript" id="1"]
script/source = "extends Skeleton3D

#export (NodePath) var root_joint_path setget _set_root_node
@export var iteration_count = 10
@export var target_position = Vector3.ZERO
@export var pole_position = Vector3.ZERO
@export var pole_rotation = Vector3.ZERO
var joints = []
var joint_lengths = 0
var positions = []
var max_length = 0

func set_joints(joints): # there is ordering to joints. joints[0] is root
	self.joints = joints
	joint_lengths = []
	max_length = 0
	for i in range(1, joints.size()):
		joint_lengths.append((joints[i].global_transform.origin - joints[i-1].global_transform.origin).length())
		max_length += joint_lengths[joint_lengths.size()-1]
	positions = []
	for joint in joints:
		positions.append(joint.global_transform.origin)

func update_joint_transforms():
	if !joints or joints.size() == 0:
		return
	for i in range (0, joints.size()):
		positions[i] = joints[i].global_transform.origin
	if joints[0].global_transform.origin.distance_squared_to(target_position) >= max_length*max_length: #	full stretch:
		var direction = (target_position - positions[0]).normalized()
		for i in range(1, positions.size()):
			positions[i] = positions[i-1] + direction * joint_lengths[i-1]
	else:
		for i in range(iteration_count):
			# backward
			var epsilon = 0.01
			if positions[positions.size()-1].distance_squared_to(target_position) < epsilon*epsilon:
				break
			for z in range(positions.size()-1, 0, -1):
				if z == positions.size()-1:
					positions[z] = target_position
				else:
					positions[z] = positions[z+1] + (positions[z] - positions[z+1]).normalized() * joint_lengths[z]
			# forward
			for k in range(1, positions.size()):
				positions[k] = positions[k-1] + (positions[k] - positions[k-1]).normalized() * joint_lengths[k-1]
	for i in range (1, positions.size()-1): # we can only move the middle joints (towards pole)
		var normal = (positions[i+1]-positions[i-1]).normalized()
		var plane = Plane(normal, positions[i-1].dot(normal)) # put a plane on i-1 so we can check how much middle node must be rotated to reach pole projection on the plane
		var projected_pole = plane.project(pole_position)
		var projected_joint = plane.project(positions[i])
		var angle = (projected_joint-positions[i-1]).angle_to(projected_pole-positions[i-1])
		if (projected_joint-positions[i-1]).cross(projected_pole-positions[i-1]).dot(plane.normal) < 0: # need signed angle
			angle = -angle
		positions[i] = Quaternion(normal, angle).normalized() * (positions[i] - positions[i-1]) + positions[i-1]
	for i in range (0, joints.size()):
		joints[i].global_transform.origin = positions[i]
		var next_position = positions[i+1] if i < joints.size()-1 else target_position
		var up = pole_rotation - positions[i] # keep up directed at pole
		joints[i].look_at(next_position, up)
"

[node name="inverse_kinematic_solver" type="Skeleton3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
script = SubResource("1")
iteration_count = 1
